echo 'dropping db'
mongo aggregation_bug --eval '
db.dropDatabase();
'

echo 'Importing temp collection'

#mongoimport -d aggregation_bug -c tmp_import  --drop files/slovac_facts.json
mongoimport -d aggregation_bug -c tmp_import  --drop files/two_facts.json


echo '**** importing to real collection'
mongo aggregation_bug --eval '
load("files/wrapper.js");
wrapper({db_name: "aggregation_bug", import_collection_name: "tmp_import", allowed_dimension_types: ["Market", "Brand"]});'


echo '**** this aggregation command returns 2 results instead of one....'
mongo aggregation_bug --eval '

db.some_kpi.aggregate(
  [
    {"$unwind": "$dimensions"},
    {"$match": {"dimensions.class_name": {"$in": ["Market"]}}},
    {
      "$group": {
        "_id": {"dimensions": "$dimensions"},
        "dates": {"$addToSet": "$date"},
        "value": {"$sum": "$value"}
     }
    },
    {"$sort": {"value": -1 } }
  ]
).forEach(printjson)
'


echo '**** a workaround to force the order for object fields directly in the $group(aggregation) condition, e.g: '
echo
mongo aggregation_bug --eval '
db.some_kpi.aggregate(
  [
    {"$unwind": "$dimensions"},
    {"$match": {"dimensions.class_name": {"$in": ["Market"]}}},
    {
      "$group": {
        "_id": {"dimensions": {
          "class_name": "$dimensions.class_name",
          "name":       "$dimensions.name",
        }},
        "dates": {"$addToSet": "$date"},
        "value": {"$sum": "$value"}
     }
    },
    {"$sort": {"value": -1 } }
  ]
).forEach(printjson)
'